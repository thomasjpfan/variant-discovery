- started out building all the components individually, relyiong heavily on ShellTasks for the non-python tools (fastp, samtools)
- started trying to pull them all together into a workflow
- wanted to use dynamic so you could accept an arbitrary number of reads in a dir
- wanted to use dataclasses to nicely encapsulate read1, read2, report etc
- can't built dataclass from ShellTask outputs in dynamic because dynamic can only pop/append to lists!
- refactoring to python tasks + subproc to unpack/repack dataclass after processing


- Option 1:
  - pass lists of read1, read2, reports etc between ShellTasks
  - wf basically becomes a script, passing args/return values explicitly between disparate functions

- Option 2:
  - pass dataclasses bw python tasks
  - wf looks more like a Class, with the dataclass representing self, allowing you to access attrs within tasks without
    having to pass them in explicitly